{"version":3,"sources":["components/MobileView.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","ListGroup","Item","variant","className","ing","amount","MobileView","data","this","Ingredients","num","push","key","name","Container","fluid","style","backgroundImage","strDrinkThumb","RefreshButton","Row","strDrink","strGlass","Col","xs","sm","strCategory","strAlcoholic","map","strInstructions","Component","App","state","width","window","innerWidth","drinkData","saveDrinkData","bind","getRandomDrinkData","fetch","then","response","json","drinks","Array","setState","isMobile","Button","onClick","size","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1dee4d13.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\"\r\n\r\nimport Fade from \"react-reveal/Fade\";\r\n\r\nimport \"../css/Mobile.css\";\r\n\r\nexport class MobileView extends Component {\r\n  render() {\r\n    const data = this.props.data;\r\n    const Ingredients = [];\r\n\r\n    for (let num = 1; num < 16; num++) {\r\n      if (data[`strIngredient${num}`] != null && data[`strIngredient${num}`] !== \"\") {\r\n        Ingredients.push({\r\n          key: num,\r\n          name: data[`strIngredient${num}`],\r\n          amount: data[`strMeasure${num}`],\r\n        });\r\n      }\r\n    }\r\n    return (\r\n      <Container className=\"m-0 p-0 position-relative\" fluid>\r\n        <Fade>\r\n          <div\r\n            className=\"mobile-image\"\r\n            style={{ backgroundImage: `url(\"${data.strDrinkThumb}\")` }}\r\n          >\r\n            {this.props.RefreshButton}\r\n          </div>\r\n          <Container className=\"image-text\" fluid>\r\n            <Container className=\"m-0 p-0\" fluid>\r\n              <Row className=\"m-0 p-2 w-100 h-100\">\r\n                <div className=\"drink-name\">{data.strDrink}</div>\r\n                <div className=\"glass-small\">\r\n                  - Preferably in a {data.strGlass}\r\n                </div>\r\n              </Row>\r\n            </Container>\r\n          </Container>\r\n\r\n          <Container className=\"info-cont mt-0\" fluid>\r\n            <Container className=\"m-0 p-0\" fluid>\r\n              <Row>\r\n                <Col xs={12} sm={6} className=\"mt-1 mb-1\">\r\n                  <ListGroup className=\"m-1\">\r\n                    <ListGroup.Item variant={\"success\"}>Details</ListGroup.Item>\r\n                    <ListGroup.Item>{data.strCategory}</ListGroup.Item>\r\n                    <ListGroup.Item>{data.strAlcoholic} drink</ListGroup.Item>\r\n                  </ListGroup>\r\n                  <ListGroup className=\"m-1 pt-2\">\r\n                    <ListGroup.Item variant={\"warning\"}>\r\n                      Ingredients\r\n                    </ListGroup.Item>\r\n                    {Ingredients.map((ing) => (\r\n                      <ListItem\r\n                        key={ing.key}\r\n                        ing={ing.name}\r\n                        amount={ing.amount}\r\n                      ></ListItem>\r\n                    ))}\r\n                  </ListGroup>\r\n                </Col>\r\n                <Col xs={12} sm={6} className=\"mt-1 mb-1\">\r\n                  <ListGroup className=\"m-1\">\r\n                    <ListGroup.Item variant={\"info\"}>\r\n                      Instructions\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item className=\"instructions-text\">\r\n                      <small>{data.strInstructions}</small>\r\n                    </ListGroup.Item>\r\n                  </ListGroup>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Container>\r\n        </Fade>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nfunction ListItem(props) {\r\n  return (\r\n    <ListGroup.Item\r\n      variant=\"light\"\r\n      className=\"d-flex justify-content-between align-items-center\"\r\n    >\r\n      {props.ing}\r\n      <span className=\"badge badge-light\">{props.amount}</span>\r\n    </ListGroup.Item>\r\n  );\r\n}\r\n\r\nexport default MobileView;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nimport MobileView from \"./components/MobileView\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      drinkData: [],\n    };\n    this.saveDrinkData = this.saveDrinkData.bind(this);\n    this.getRandomDrinkData = this.getRandomDrinkData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRandomDrinkData();\n  }\n\n  getRandomDrinkData() {\n    var url = \"https://www.thecocktaildb.com/api/json/v1/1/random.php\";\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => this.saveDrinkData(data.drinks[0]));\n  }\n\n  saveDrinkData(Array) {\n    this.setState({ drinkData: Array });\n  }\n\n  render() {\n    const isMobile = this.state.width <= 845;\n    const RefreshButton = (\n      <div className=\"refresh-btn\">\n        <Button onClick={this.getRandomDrinkData} variant=\"warning\" size=\"sm\">\n          New Drink?\n        </Button>\n      </div>\n    );\n\n    if (isMobile) {\n      // load mobile view\n      return (\n        <MobileView\n          RefreshButton={RefreshButton}\n          data={this.state.drinkData}\n        ></MobileView>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <Container>\n            <MobileView\n              RefreshButton={RefreshButton}\n              data={this.state.drinkData}\n            ></MobileView>\n          </Container>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}